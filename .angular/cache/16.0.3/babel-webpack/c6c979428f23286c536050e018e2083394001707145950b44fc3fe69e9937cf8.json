{"ast":null,"code":"import _defineProperty from \"/project/angular-ace-dynamichovertooltip-sample/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { ViewContainerRef } from '@angular/core';\nimport * as ace from 'ace-builds';\nimport { CustomTooltipComponent } from './custom-tooltip/custom-tooltip.component';\nimport * as i0 from \"@angular/core\";\nconst _c0 = [\"editor\"];\nconst _c1 = [\"dynamic\"];\nfunction AppComponent_ng_template_2_Template(rf, ctx) {}\nconst tooltip = ace.require('ace/tooltip');\nexport let AppComponent = /*#__PURE__*/(() => {\n  class AppComponent {\n    constructor(viewContainerRef) {\n      _defineProperty(this, \"viewContainerRef\", void 0);\n      _defineProperty(this, \"editor\", void 0);\n      _defineProperty(this, \"viewRef\", void 0);\n      _defineProperty(this, \"counter\", 0);\n      this.viewContainerRef = viewContainerRef;\n    }\n    ngOnInit() {\n      // this.loadComponent();\n    }\n    loadComponent() {\n      this.viewRef.clear();\n      const tooltipRef = this.viewRef.createComponent(CustomTooltipComponent);\n      tooltipRef.setInput('data', 'tooltip ref set input');\n      tooltipRef.changeDetectorRef.detectChanges();\n    }\n    ngAfterViewInit() {\n      // this.loadComponent();\n      ace.config.set('fontSize', '14px');\n      ace.config.set('basePath', 'https://unpkg.com/ace-builds@1.4.12/src-noconflict');\n      const aceEditor = ace.edit(this.editor.nativeElement);\n      aceEditor.session.setValue('<h1>Ace Editor works great in Angular!</h1>');\n      aceEditor.setTheme('ace/theme/twilight');\n      aceEditor.session.setMode('ace/mode/html');\n      aceEditor.on('change', () => {\n        console.log(aceEditor.getValue());\n      });\n      const docTooltip = new tooltip.HoverTooltip();\n      const hoverNode = document.createElement('div');\n      this.viewRef.clear();\n      // const tooltipRef = this.viewRef.createComponent(CustomTooltipComponent);\n      // tooltipRef.setInput('data', 'tooltip ref set input');\n      // tooltipRef.changeDetectorRef.detectChanges(); // this is needed everytime setInput is changed?\n      // tooltipRef.changeDetectorRef.detectChanges();\n      // const componentFactory = this.cfr.resolveComponentFactory(CustomTooltipComponent);\n      // const component = componentFactory.create(this.injector);\n      // const componentRef = this.viewRef.createComponent(componentFactory);\n      // component.instance.data = 'hello world v2';\n      // component.changeDetectorRef.detectChanges();\n      docTooltip.setDataProvider((e, editor) => {\n        const session = editor.session;\n        const docPos = e.getDocumentPosition();\n        hoverNode.innerHTML = 'hello <span style=\"color: bold; text-weight: bold\">world</span>';\n        const range = session.getWordRange(docPos.row, docPos.column);\n        const tooltipRef = this.viewRef.createComponent(CustomTooltipComponent);\n        tooltipRef.setInput('data', 'tooltip ref set input ' + this.counter++ + range.toString());\n        tooltipRef.changeDetectorRef.detectChanges();\n        // componentRef.instance.data = 'Hello World Data';\n        // component.changeDetectorRef.detectChanges();\n        // console.log(editor, range, tooltipRef, e);\n        // docTooltip.showForRange(editor, range, hoverNode, e);\n        // this line gets the current word that is being hovered\n        docTooltip.showForRange(editor, range, tooltipRef.location.nativeElement, e);\n      });\n      docTooltip.addToEditor(aceEditor);\n    }\n  }\n  _defineProperty(AppComponent, \"\\u0275fac\", function AppComponent_Factory(t) {\n    return new (t || AppComponent)(i0.ɵɵdirectiveInject(i0.ViewContainerRef));\n  });\n  _defineProperty(AppComponent, \"\\u0275cmp\", /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AppComponent,\n    selectors: [[\"app-root\"]],\n    viewQuery: function AppComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n        i0.ɵɵviewQuery(_c1, 5, ViewContainerRef);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.editor = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.viewRef = _t.first);\n      }\n    },\n    decls: 4,\n    vars: 0,\n    consts: [[1, \"app-ace-editor\", 2, \"width\", \"500px\", \"height\", \"250px\"], [\"editor\", \"\"], [\"dynamic\", \"\"]],\n    template: function AppComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"div\", 0, 1);\n        i0.ɵɵtemplate(2, AppComponent_ng_template_2_Template, 0, 0, \"ng-template\", null, 2, i0.ɵɵtemplateRefExtractor);\n      }\n    },\n    styles: [\".app-ace-editor[_ngcontent-%COMP%]{border:2px solid #f8f9fa;box-shadow:0 .5rem 1rem #00000026}\"]\n  }));\n  return AppComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}